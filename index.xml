<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Subhabrata Choudhury</title><link>/</link><description>Recent content on Subhabrata Choudhury</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2017 11:11:13 +0530</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Native kdb Queries in Spring JDBC</title><link>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</link><pubDate>Sun, 12 Feb 2017 11:11:13 +0530</pubDate><guid>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</guid><description>In my last post on accessing a kdb+ server from spring, we configured Spring to listen to a kdb+ gateway via jdbc. One drawback of using jdbc is queries will now have to be written as single-line sql strings to match the type of JdbcTemplate query arguments. This strips away some of the advantages c.java style querying has. In this post we&amp;rsquo;ll go over a way to use the native kdb executor method in spring jdbc so that we can query c.</description></item><item><title>Concatenating kdb Columns</title><link>/p/2016/05/concatenating-kdb-columns/</link><pubDate>Sat, 14 May 2016 10:58:42 +0530</pubDate><guid>/p/2016/05/concatenating-kdb-columns/</guid><description>Suppose in a query you need to concatenate two kdb columns into one; for example, to join date and time into one field - kdb has nifty features to do it easily.
You can join(,) two or more column into one using '(each-both). The columns do not need to be of the same type. The type of the returned column is list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 q)tab:([]firstname:`John`Jia`Jai`Jac;lastname:`James`Jain`Jadeja`Jones;age:1+4?</description></item><item><title>Interfacing Java Spring with kdb</title><link>/p/2016/03/interfacing-java-spring-with-kdb/</link><pubDate>Thu, 24 Mar 2016 10:53:13 +0530</pubDate><guid>/p/2016/03/interfacing-java-spring-with-kdb/</guid><description>The classic way to access a kdb server from java is via the c class. The jdbc implementation makes it easy to interface with a kdb database providing higher level methods to establish a database connection, parse the returned object. One drawback is that it does not support retrieving result that is not a table. Let&amp;rsquo;s go over a short guide on how to use jdbc to connect to kdb.</description></item><item><title>Hello World!</title><link>/p/2016/03/hello-world/</link><pubDate>Sat, 12 Mar 2016 12:53:29 +0530</pubDate><guid>/p/2016/03/hello-world/</guid><description>For more than half a decade - since my freshman year at college, I have spent thinking how cool it would be to have a website of my own. At long last, I now have one! The plan is to post something interesting on a regular basis.
Now that it&amp;rsquo;s up, I wish I had done it sooner. We are never happy with ourselves, arenâ€™t we?
Making-of It took two weeks to create the design and code the website.</description></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hello there! I am Subhabrata Choudhury. I did my undergrad in metallurgy at IIT Kharagpur in India a couple of years back. After my brief stint in finance at Bank of America and Flextrade Systems, I moved to Germany and joined Saarland University to complete my masters in computer science. Currently I am in the UK as a PhD candidate at the University of Oxford. I love music, theatre and arts; and suck spectacularly at all of them.</description></item><item><title>Unsupervised Part Discovery with Contrastive Reconstruction</title><link>/projects/unsup-parts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/unsup-parts/</guid><description/></item></channel></rss>