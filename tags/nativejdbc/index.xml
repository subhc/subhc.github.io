<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nativeJDBC on Subhabrata Choudhury</title><link>/tags/nativejdbc/</link><description>Recent content in nativeJDBC on Subhabrata Choudhury</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2017 11:11:13 +0530</lastBuildDate><atom:link href="/tags/nativejdbc/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Native kdb Queries in Spring JDBC</title><link>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</link><pubDate>Sun, 12 Feb 2017 11:11:13 +0530</pubDate><guid>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</guid><description>In my last post on accessing a kdb+ server from spring, we configured Spring to listen to a kdb+ gateway via jdbc. One drawback of using jdbc is queries will now have to be written as single-line sql strings to match the type of JdbcTemplate query arguments. This strips away some of the advantages c.java style querying has. In this post we&amp;rsquo;ll go over a way to use the native kdb executor method in spring jdbc so that we can query c.</description></item></channel></rss>