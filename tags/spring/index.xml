<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Subhabrata Choudhury</title><link>/tags/spring/</link><description>Recent content in spring on Subhabrata Choudhury</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2017 11:11:13 +0530</lastBuildDate><atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Native kdb Queries in Spring JDBC</title><link>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</link><pubDate>Sun, 12 Feb 2017 11:11:13 +0530</pubDate><guid>/p/2017/02/running-native-kdb-queries-in-spring-jdbc/</guid><description>In my last post on accessing a kdb+ server from spring, we configured Spring to listen to a kdb+ gateway via jdbc. One drawback of using jdbc is queries will now have to be written as single-line sql strings to match the type of JdbcTemplate query arguments. This strips away some of the advantages c.java style querying has. In this post we&amp;rsquo;ll go over a way to use the native kdb executor method in spring jdbc so that we can query c.</description></item><item><title>Interfacing Java Spring with kdb</title><link>/p/2016/03/interfacing-java-spring-with-kdb/</link><pubDate>Thu, 24 Mar 2016 10:53:13 +0530</pubDate><guid>/p/2016/03/interfacing-java-spring-with-kdb/</guid><description>The classic way to access a kdb server from java is via the c class. The jdbc implementation makes it easy to interface with a kdb database providing higher level methods to establish a database connection, parse the returned object. One drawback is that it does not support retrieving result that is not a table. Let&amp;rsquo;s go over a short guide on how to use jdbc to connect to kdb.</description></item></channel></rss>